#lang simply-scheme

;1)
(define x (cons 4 5))
(car x)
(cdr x)
(define y (cons 'hello 'goodbye))
(define z (cons x y))
(car (cdr z))
(cdr (cdr z))

;2)
;5
(cdr (car z))
;8
(car (cons 8 3))
;(3 . 4) close actually '(3 . 4)
(car z)
;3 Wrong actually error
;(car 3)

;3
(define (make-rational num den)
  (cons num den))
(define (numerator rat)
  (car rat))
(define (denominator rat)
  (cdr rat))
(define (*rat a b)
  (make-rational (* (numerator a) (numerator b))
                 (* (denominator a) (denominator b))))
(define (print-rat rat)
  (word (numerator rat) '/ (denominator rat)))
 
 ;4)
(print-rat (make-rational 2 3))
(print-rat (*rat (make-rational 2 3) (make-rational 1 4)))

;5)
(define (+rat a b)
  (make-rational (+ (* (numerator a) (denominator b))
                    (* (numerator b) (denominator a)))
                 (* (denominator a) (denominator b))))
(print-rat (+rat (make-rational 2 3) (make-rational 1 4)))

;6-2.2

(define (make-segment p1 p2)
  (cons p1 p2))
(define (start-segment seg)
  (car seg))
(define (end-segment seg)
  (cdr seg))
(define (make-point x y)
  (cons x y))
(define (x-point p)
  (car p))
(define (y-point p)
  (cdr p))
(define (midpoint-segment seg)
  (make-point (/ (+ (x-point (start-segment seg)) (x-point (end-segment seg))) 2)
              (/ (+ (y-point (start-segment seg)) (y-point (end-segment seg))) 2)))
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

;test (1,-2) (3,-3) (5,-4)
(define p1 (make-point 1 -2))
(define p2 (make-point 5 -4))
(define line (make-segment p1 p2))
(print-point (midpoint-segment line))

;6-2.3
(define (make-rectangle-1 p1 p2)
  (cons p1 p2))
(define (make-rectangle-2 diag)
  (cons (start-segment diag) (end-segment diag)))
(define (rec-p1 rec)
  (car rec))
(define (rec-p2 rec)
  (cdr rec))
(define (rec-area rec)
  (* (abs (- (x-point (rec-p1 rec)) (x-point (rec-p2 rec)))))
     (abs (- (y-point (rec-p1 rec)) (y-point (rec-p2 rec)))))
(define (rec-perimeter rec)
  (+ (* (abs (- (x-point (rec-p1 rec)) (x-point (rec-p2 rec)))) 2)
     (* (abs (- (y-point (rec-p1 rec)) (y-point (rec-p2 rec)))) 2)))
;test
(make-rectangle-1 p1 p2)
(make-rectangle-2 line)
(rec-area (make-rectangle-1 p1 p2))
(rec-area (make-rectangle-2 line))
(rec-perimeter (make-rectangle-1 p1 p2))
(rec-perimeter (make-rectangle-2 line))

;6-2.4
(define (cons1 x y)
  (lambda (m) (m x y)))
(define (car1 z)
  (z (lambda (p q) p)))
(define (cdr1 z)
  (z (lambda (p q) q)))

;(define x 1)
;(define y 2)
;(define z (cons1 a b))

;(car1 z)
;(z (lambda (p q) p))
;((cons1 x y) (lambda (p q) p))
;((lambda (m) (m x y)) (lambda (p q) p))
;((lambda (p q) p) x y))
;(x)

;(cdr1 z)
;(z (lambda (p q) q))
;((cons x y) (lambda (p q) q))
;((lambda (m) (m x y)) (lambda (p q) q))
;((lambda (p q) q) x y))
;(y)

;7
(define x1 '(a (b c) d))
(car x1)
(cdr x1)
(car (cdr x1))

;8 2.18
(define (reverse lis)
  (define (reverse-iter orig rev)
    (if (equal? (cdr orig) '())
        (cons (car orig) rev)
        (reverse-iter (cdr orig) (cons (car orig) rev))))
  (reverse-iter lis '()))
(reverse (list 1 4 9 16 25))