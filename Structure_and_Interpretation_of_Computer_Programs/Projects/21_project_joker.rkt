#lang simply-scheme



(define (card-value card)
  (cond ((number? (butlast card)) (butlast card))
        ((equal? (first card) 'A) 'A)
        ((equal? (first card) 'J) 10)
        ((equal? (first card) 'Q) 10)
        ((equal? (first card) 'K) 10)
        ((equal? (first card) 'X) 'X)
        (else (display card) (error "Bad card value"))))



(define (all-totals-no-jokers hand)
  (cond ((empty? hand) '(0))
        ((equal? (card-value (first hand)) 'A)
         (append (map (lambda (x) (+ 1 x))
                      (all-totals-no-jokers (butfirst hand)))
                 (map (lambda (x) (+ 11 x))
                      (all-totals-no-jokers (butfirst hand)))))
        (else (map (lambda (x) (+ (card-value (first hand)) x))
                   (all-totals-no-jokers (butfirst hand))))))

;(trace all-totals-no-jokers)
(define (totals-with-jokers hand-no-jokers n-jokers)
  (let ((btnj (best-total-no-joker hand-no-jokers)))
    (cond ((= 0 n-jokers)
           btnj)
          ((and (= 1 n-jokers) (>= btnj 21))
           (+ btnj 1))
          ((and (= 1 n-jokers) (>= btnj 10))
           21)
          ((= 1 n-jokers)
           (+ btnj 11))
          ((and (= 2 n-jokers) (empty? hand-no-jokers))
           21)
          ((and (= 2 n-jokers) (>= btnj 20))
           (+ btnj 2))
          ((= 2 n-jokers)
           21)
          (else
           (error "Jake is confused")))))

(define (remove-jokers hand)
  (cond ((empty? hand) '())
        ((equal? (card-value (first hand)) 'X)
         (se (remove-jokers (butfirst hand))))
        (else
         (se (first hand) (remove-jokers (butfirst hand))))))

(define (jokers-in-hand fullhand)
  (define (jokers-in-hand-iter hand n)
    (cond ((empty? hand) n)
          ((equal? (card-value (first hand)) 'X)
           (jokers-in-hand-iter (butfirst hand) (+ n 1)))
          (else
           (jokers-in-hand-iter (butfirst hand) n))))
  (jokers-in-hand-iter fullhand 0))

(define (best-total hand)
  (totals-with-jokers (remove-jokers hand) (jokers-in-hand hand)))

;1
(define (best-total-no-joker hand)
  (define (best-so-far handtotals best)
    (cond ((empty? handtotals)
           best)
          ((and (< best (first handtotals)) (< (first handtotals) 22))
           (best-so-far (butfirst handtotals) (first handtotals)))
          ((and (< 21 best) (< (first handtotals) best))
           (best-so-far (butfirst handtotals) (first handtotals)))
          (else
           (best-so-far (butfirst handtotals) best))))
  (best-so-far (all-totals-no-jokers hand) 100))

(define h1 '("10S" "4C" "3C" "JH"))
(all-totals-no-jokers h1)
;(best-total h1)
;(> (best-total h1) 21)

(define (twenty-one strategy)
  (define (play-dealer customer-hand dealer-hand-so-far rest-of-deck)
    (cond ((> (best-total dealer-hand-so-far) 21)
           (display "1 dealer bust ")
           (newline)
           (display customer-hand)
           (display " ")
           (display (best-total customer-hand))
           (newline)
           (display dealer-hand-so-far)
           (display " ")
           (display (best-total dealer-hand-so-far))
           (newline)
           (newline)
           1)
	  ((< (best-total dealer-hand-so-far) 17)
           (play-dealer customer-hand
	                (se dealer-hand-so-far (first rest-of-deck))
	                (bf rest-of-deck)))
	  ((< (best-total customer-hand) (best-total dealer-hand-so-far))
           (display "-1 dealer win ")
           (newline)
           (display customer-hand)
           (display " ")
           (display (best-total customer-hand))
           (newline)
           (display dealer-hand-so-far)
           (display " ")
           (display (best-total dealer-hand-so-far))
           (newline)
           (newline)
           -1)
	      ((= (best-total customer-hand) (best-total dealer-hand-so-far))
           (display "0 tie ")
           (newline)
           (display customer-hand)
           (display " ")
           (display (best-total customer-hand))
           (newline)
           (display dealer-hand-so-far)
           (display " ")
           (display (best-total dealer-hand-so-far))
           (newline)
           (newline)
           0)
	  (else
           (display "1 beat dealer")
           (newline)
           (display customer-hand)
           (display " ")
           (display (best-total customer-hand))
           (newline)
           (display dealer-hand-so-far)
           (display " ")
           (display (best-total dealer-hand-so-far))
           (newline)
           (newline)1)))

  (define (play-customer customer-hand-so-far dealer-up-card rest-of-deck)
    (cond ((> (best-total customer-hand-so-far) 21) 
           (display "-1 bust")
           (newline)
           (display customer-hand-so-far)
           (display " ")
           (display (best-total customer-hand-so-far))
           (newline)
           (display dealer-up-card)
           (newline)
           (newline)
           -1)
	  ((strategy customer-hand-so-far dealer-up-card)
	   (play-customer (se customer-hand-so-far (first rest-of-deck))
			  dealer-up-card
			  (bf rest-of-deck)))
	  (else
	   (play-dealer customer-hand-so-far
		         	(se dealer-up-card (first rest-of-deck))
			        (bf rest-of-deck)))))
  (let ((deck (make-deck)))
       (play-customer (se (first deck) (first (bf deck)))
		              (first (bf (bf deck)))
		              (bf (bf (bf deck))))) )

(define (make-ordered-deck)
  (define (make-suit s)
    (every (lambda (rank) (word rank s)) '(A 2 3 4 5 6 7 8 9 10 J Q K)) )
  (se (make-suit 'H) (make-suit 'S) (make-suit 'D) (make-suit 'C) "XX" "XX") )

(define (make-deck)
  (define (shuffle deck size)
    (define (move-card in out which)
      (if (= which 0)
	  (se (first in) (shuffle (se (bf in) out) (- size 1)))
	  (move-card (bf in) (se (first in) out) (- which 1)) ))
    (if (= size 0)
	deck
    	(move-card deck '() (random size)) ))
  (shuffle (make-ordered-deck) 52) )

;2
(define (stop-to-17 customer-hand-so-far dealer-up-card)
  (cond ((< (best-total customer-hand-so-far) 17)
	       #t)
        (else #f)))

;4
(define (dealer-sensitive customer-hand-so-far dealer-up-card)
  (cond ((and (< (best-total customer-hand-so-far) 17)
              (or (equal? (card-value dealer-up-card) "A")
                  (> (card-value dealer-up-card) 6)))
         #t)
         ((and (< (best-total customer-hand-so-far) 12)
               (and (not(equal? (card-value dealer-up-card) "A"))
                    (< (card-value dealer-up-card) 7)))
                   
          #t)
        (else #f)))

(define (stop-at n)
  (lambda (customer-hand-so-far dealer-up-card)
    (cond ((< (best-total customer-hand-so-far) n)
  	       #t)
          (else #f))))

;6
(define (card-suit card)
  (last card))

(define (suit-in-hand? hand suit)
  (cond ((empty? hand)
         #f)
        ((equal? (card-suit (first hand)) suit)
         #t)
        (else (suit-in-hand? (butfirst hand) suit))))

(define (valentine customer-hand-so-far dealer-up-card)
  (cond ((and (suit-in-hand? customer-hand-so-far "H")
           (< (best-total customer-hand-so-far) 19))
         #t)
        ((< (best-total customer-hand-so-far) 13)
         #t)
        (else #f)))
        
(define (suit-stategy suit strategy-with-suit strategy-without-suit)
  (lambda (customer-hand-so-far dealer-up-card)
    (if (suit-in-hand? customer-hand-so-far suit)
        (strategy-with-suit customer-hand-so-far dealer-up-card)
        (strategy-without-suit customer-hand-so-far dealer-up-card))))

(define (majority strategy1 strategy2 strategy3)
  (lambda (customer-hand-so-far dealer-up-card)
    (if (or (and (strategy1 customer-hand-so-far dealer-up-card)
                 (strategy2 customer-hand-so-far dealer-up-card))
            (and (strategy1 customer-hand-so-far dealer-up-card)
                 (strategy3 customer-hand-so-far dealer-up-card))
            (and (strategy2 customer-hand-so-far dealer-up-card)
                 (strategy3 customer-hand-so-far dealer-up-card)))
        #t
        #f)))

(define (reckless strategy)
  (lambda (customer-hand-so-far dealer-up-card)
    (cond ((= (length customer-hand-so-far) 2) #t)
          ((strategy customer-hand-so-far dealer-up-card) #t)
          ((strategy (butlast customer-hand-so-far) dealer-up-card) #t)
          (else #f))))

;3
(define (play-n n strategy)
  (display n)
  (newline)
  (twenty-one strategy)
  (if (= (- n 1) 0)
      #t
      (play-n (- n 1) strategy)))


(play-n 1000 (suit-stategy "X" (stop-at 21) stop-to-17))
(define h2 '("AD" "7H"))
(define d "AH")
((majority (stop-at 16) dealer-sensitive valentine) h2 d)
;(suit-in-hand? h2 "H")
(valentine h2 d)
(dealer-sensitive h2 d)
((stop-at 16) h2 d)
(best-total h2)